<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- $Id$ -->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:jsimpledb="http://jsimpledb.googlecode.com/schema/jsimpledb"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:c="http://www.springframework.org/schema/c"
  xsi:schemaLocation="
   http://jsimpledb.googlecode.com/schema/jsimpledb http://jsimpledb.googlecode.com/svn/schemas/jsimpledb-1.0.xsd 
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Activate Spring annotation support -->
    <context:annotation-config/>

    <!-- Substitute ${properties.like.this} in this application context -->
    <context:property-placeholder/>

    <!-- Activate @Configurable -->
    <context:spring-configured/>

    <!-- Example bean whose lifecycle matches the servlet lifecycle (i.e., broader than any particular Vaadin application) -->
    <bean class="com.example.MyBean"/>

<!-- JSimpleDB database -->

     <!-- Define the underlying key/value store -->
     <bean id="kvstore" class="org.jsimpledb.kv.simple.XMLKVDatabase" c:file="${java.io.tmpdir}/dellroad-stuff-demo.xml"/>

     <!-- Define the core Database layer on top of that -->
     <bean id="database" class="org.jsimpledb.core.Database" p:KVDatabase-ref="kvstore"/>

     <!-- Define the Java model layer (JSimpleDB) using our annotated Java classes -->
     <bean id="jsimpledb" class="org.jsimpledb.JSimpleDB" c:database-ref="database" c:version="1">
         <constructor-arg>
             <jsimpledb:scan-classpath base-package="com.example"/>
         </constructor-arg>
     </bean>

<!-- Spring transaction manager -->

    <!-- Create a Spring transaction manager -->
    <bean id="transactionManager" class="org.jsimpledb.spring.JSimpleDBTransactionManager"
      p:JSimpleDB-ref="jsimpledb"/>

    <!-- Activate @Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" mode="aspectj"/>

<!-- Other application scope classes -->

    <!-- Use this multicaster for all application events -->
    <bean id="webApplicationMulticaster" class="org.springframework.context.event.SimpleApplicationEventMulticaster"/>

    <bean class="com.example.ApplicationContextInfo" factory-method="getInstance"/>

</beans>
